<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AmountIsNotPositive" xml:space="preserve">
    <value>Amount is not positive</value>
  </data>
  <data name="AmountIsGreaterThanSupply" xml:space="preserve">
    <value>Amount is greater than supply</value>
  </data>
  <data name="AmountIsGreaterThanBalance" xml:space="preserve">
    <value>Amount is greater than balance</value>
  </data>
  <data name="TransactionAndItemHaveDifferentUnitTypes" xml:space="preserve">
    <value>Transaction and item have different unit types</value>
  </data>
  <data name="TransactionContainsExpiredUnits" xml:space="preserve">
    <value>Transaction contains expired units</value>
  </data>
  <data name="CreditorAndDebtorAreTheSame" xml:space="preserve">
    <value>Creditor and debtor are the same</value>
  </data>
  <data name="CreditAndDebitAccountsAreEqual" xml:space="preserve">
    <value>Credit and debit accounts are equal</value>
  </data>
  <data name="CreditAccountAndItemHaveDifferentUnits" xml:space="preserve">
    <value>Credit account and item have different units</value>
  </data>
  <data name="DebitAccountAndItemHaveDifferentUnits" xml:space="preserve">
    <value>Debit account and item have different units</value>
  </data>
  <data name="ItemUnitCannotBeExchanged" xml:space="preserve">
    <value>Item unit cannot be exchanged</value>
  </data>
  <data name="IssuerCannotSetMaxDurationBeforeValidityStart" xml:space="preserve">
    <value>Issuer cannot set maxDurationBeforeValidityStart</value>
  </data>
  <data name="IssuerCannotSetMinDurationBeforeValidityEnd" xml:space="preserve">
    <value>Issuer cannot set minDurationBeforeValidityEnd</value>
  </data>
  <data name="IssuerCannotRequireExchangeability" xml:space="preserve">
    <value>Issuer cannot require exchangeability</value>
  </data>
  <data name="UnitIsExpired" xml:space="preserve">
    <value>Unit is expired</value>
  </data>
  <data name="AccountHolderAndUnitTypeIssuerAreDifferent" xml:space="preserve">
    <value>Account holder and unit type issuer are different</value>
  </data>
  <data name="AccountItemUnitAndTransactionUnitAreDifferent" xml:space="preserve">
    <value>Account item unit and transaction unit are different</value>
  </data>
  <data name="ValidToIsLessThanToday" xml:space="preserve">
    <value>ValidTo is less than today</value>
  </data>
  <data name="ValidFromIsGreaterThanValidTo" xml:space="preserve">
    <value>ValidFrom is greater than validTo</value>
  </data>
  <data name="NewValidFromIsGreaterThanCurrentValidFrom" xml:space="preserve">
    <value>New validFrom is greater than current validFrom</value>
  </data>
  <data name="NewValidFromIsGreaterThanCurrentValidTo" xml:space="preserve">
    <value>New validFrom is greater than current validTo</value>
  </data>
  <data name="NewValidToIsLessThanCurrentValidFrom" xml:space="preserve">
    <value>New validTo is less than current validFrom</value>
  </data>
  <data name="CurrentValidFromIsGreaterThanNewValidTo" xml:space="preserve">
    <value>Current validFrom is greater than new validTo</value>
  </data>
  <data name="CannotDisableExchangeability" xml:space="preserve">
    <value>Cannot disable exchangeability</value>
  </data>
  <data name="CannotOperateWithDifferentUnitTypes" xml:space="preserve">
    <value>Cannot operate with different unit types</value>
  </data>
  <data name="TransactionIsAlreadyPerformed" xml:space="preserve">
    <value>Transaction is already performed</value>
  </data>
  <data name="RequestCreditorIsNotSatisfiedByTransaction" xml:space="preserve">
    <value>Request creditor is not satisfied by transaction</value>
  </data>
  <data name="RequestDebtorIsNotSatisfiedByTransaction" xml:space="preserve">
    <value>Request debtor is not satisfied by transaction</value>
  </data>
  <data name="RequestUnitIsNotSatisfiedByTransaction" xml:space="preserve">
    <value>Request unit is not satisfied by transaction</value>
  </data>
  <data name="RequestAmountIsNotSatisfiedByTransaction" xml:space="preserve">
    <value>Request amount is not satisfied by transaction</value>
  </data>
  <data name="RequestMaxValidFromIsNotSatisfiedByTransaction" xml:space="preserve">
    <value>Request maxValidFrom is not satisfied by transaction</value>
  </data>
  <data name="RequestMinValidToIsNotSatisfiedByTransaction" xml:space="preserve">
    <value>Request minValidTo is not satisfied by transaction</value>
  </data>
  <data name="RequestMustBeExchangeableIsNotSatisfiedByTransaction" xml:space="preserve">
    <value>Request mustBeExchangeable is not satisfied by transaction</value>
  </data>
</root>